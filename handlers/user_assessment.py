from aiogram import Router, F

from aiogram.types import Message
from aiogram.filters import or_f

from database.orm_querry import (orm_get_random_profile, orm_rate_profile,
                                 orm_count_grades, orm_get_profile, orm_get_grade,
                                 orm_add_grade, orm_update_new_count_grade,
                                 orm_delete_grade, orm_get_random_profile_man,
                                 orm_get_random_profile_woman, orm_add_report)
from handlers.user_private import AddProfile
from keyboards import reply
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.fsm.context import FSMContext

from filters.chat_types import ChatTypeFilter
from keyboards.reply import get_keyboard

user_assessment_router = Router()
user_assessment_router.message.filter(ChatTypeFilter(["private"]))


@user_assessment_router.message(or_f(F.text.contains('–û—Ü–µ–Ω–∏–≤–∞—Ç—å'), F.text.contains('‚û°Ô∏è–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')))
async def grade(message: Message, session: AsyncSession, state: FSMContext):
    profile = await orm_get_profile(session, message.from_user.id)
    if profile and profile.ban != 'block':
        if profile.wanted_gender == '–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã üë´':
            profile = await orm_get_random_profile(session, message.from_user.id)
        elif profile.wanted_gender == '–ú—É–∂—Å–∫–æ–π üë®‚Äçü¶±':
            profile = await orm_get_random_profile_man(session, message.from_user.id)
        else:
            profile = await orm_get_random_profile_woman(session, message.from_user.id)
        if profile:
            await state.update_data(liked_id=profile.id)
            await state.update_data(all_grades=profile.all_grades)
            await state.update_data(count_grades=profile.count_grades + 1)
            await state.update_data(id=message.from_user.id)
            await message.answer_photo(
                profile.photography,
                caption=f'''‚≠êÔ∏è–ò–º—è: <strong>{profile.name}, {profile.age}</strong> –ª–µ—Ç\n
üåÜ–°—Ç—Ä–∞–Ω–∞: <strong>{profile.country}</strong> 
üåá–ì–æ—Ä–æ–¥: <strong>{profile.city}</strong>
{profile.description}
*–ü—Ä–∏ –æ—Ü–µ–Ω–∫–µ 7+ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å''',
                reply_markup=get_keyboard(
                    '1',
                    '2',
                    '3',
                    '4',
                    '5',
                    '6',
                    '7',
                    '8',
                    '9',
                    '10',
                    '‚û°Ô∏è–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                    'üîô–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                    '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è‚ùå',
                    sizes=(5, 5, 3),
                ))
            await state.set_state(AddProfile.grade)
        else:
            await message.answer('''–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò¢.
–ó–æ–≤–∏ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –∞ –æ–Ω–∏ –ø–æ–∑–æ–≤—É—Ç —Å–≤–æ–∏—Ö –∏ –∞–Ω–∫–µ—Ç —Å—Ç–∞–Ω–µ—Ç –Ω–∞ —Å—Ç–æ–ª—å–∫–æ üôå –º–Ω–æ–≥–æ,
—á—Ç–æ –±–æ–ª—å—à–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∫—Ç–æ –Ω–µ —É–≤–∏–¥–∏—Ç üôÉ''')
    elif profile and profile.ban == 'block':
        await message.answer('–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ªüëø')
    else:
        await message.answer('<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</b> üôÇ', reply_markup=get_keyboard(
            "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            sizes=(1,),
        ))
        await state.set_state(AddProfile.id)


@user_assessment_router.message(AddProfile.grade, F.text)
async def next_grade(message: Message, session: AsyncSession, state: FSMContext):
    if message.text == '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è‚ùå':
        await message.answer('ü§î –û–ø–∏—à–∏—Ç–µ –∂–∞–ª–æ–±—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ',
                             reply_markup=get_keyboard(
                                 'üîû –∫–æ–Ω—Ç–µ–Ω—Ç',
                                 '–†–µ–∫–ª–∞–º–∞üì£',
                                 '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æüí≥',
                                 sizes=(2, 1)
                             ))
        await state.set_state(AddProfile.report)
    else:
        try:
            s = int(message.text)
            if 0 < s < 11:
                await state.update_data(grade=message.text)
                await state.update_data(user_name=message.from_user.username)
                data = await state.get_data()
                await orm_add_grade(session, data)
                grade_info = await orm_get_grade(session, data['liked_id'])
                await state.update_data(new_count_grades=grade_info.new_count_grades + 1)
                if grade_info.new_count_grades == 1 or grade_info.new_count_grades % 10 == 0:
                    await message.bot.send_message(data['liked_id'], '–¢–µ–±—è –∫—Ç–æ-—Ç–æ –æ—Ü–µ–Ω–∏–ª, –¥–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º –∫—Ç–æ —ç—Ç–æ üôÉ')
                data = await state.get_data()
                await orm_update_new_count_grade(session, data['liked_id'], data['new_count_grades'])
                await orm_rate_profile(session, data['liked_id'], int(data['grade']) + int(data['all_grades']))
                await orm_count_grades(session, data['liked_id'], int(data['count_grades']))
                await state.clear()
                await grade(message, session, state)
            else:
                await message.answer('‚ùå–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç <b>1</b> –¥–æ <b>10</b>‚ùå')
        except:
            await message.answer('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10')


@user_assessment_router.message(AddProfile.report, F.text)
async def save_report(message: Message, session: AsyncSession, state: FSMContext):
    await state.update_data(report=message.text)
    data = await state.get_data()
    await message.answer('–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µüßê')
    await orm_add_report(session, data)
    await state.clear()
    await grade(message, session, state)


@user_assessment_router.message(F.text.contains('–ö—Ç–æ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª'))
async def new_grades(message: Message, session: AsyncSession):
    try:
        new_grade = await orm_get_grade(session, message.from_user.id)
        liked_profile = await orm_get_profile(session, new_grade.id_user)
        await orm_update_new_count_grade(session, new_grade.liked_id, new_grade.new_count_grades - 1)
        await message.answer_photo(
            liked_profile.photography,
            caption=f'''üóí–í–∞—Å –æ—Ü–µ–Ω–∏–ª(–∞):\n
{['üë©‚Äçü¶≥', 'üë®‚Äçü¶±'][liked_profile.gender == '–ú—É–∂—Å–∫–æ–π']} {
            [liked_profile.name, '@'+new_grade.user_name][new_grade.grade >= 7]
            }
‚≠êÔ∏è–û—Ü–µ–Ω–∫–∞: {new_grade.grade}/10
üîû–í–æ–∑—Ä–∞—Å—Ç: {liked_profile.age}
üåÜ–°—Ç—Ä–∞–Ω–∞: {liked_profile.country}
üåá–ì–æ—Ä–æ–¥: {liked_profile.city}
{liked_profile.description}''')
        await orm_delete_grade(session, new_grade.id_user, new_grade.id_all)
    except:
        await message.answer('–¢–µ–±—è –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ü–µ–Ω–∏–ª')


@user_assessment_router.message()
async def help_for_you(message: Message, state: FSMContext, session: AsyncSession):
    profile = await orm_get_profile(session, message.from_user.id)
    if profile and profile.ban != 'block':
        await message.answer('üÜò–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–º–∞–Ω–¥–æ–π /help', reply_markup=reply.start_kb)
    elif profile and profile.ban == 'block':
        await message.answer('–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ªüëø')
    else:
        await message.answer('<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</b> üôÇ', reply_markup=get_keyboard(
            "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            sizes=(1,),
        ))
        await state.set_state(AddProfile.id)
