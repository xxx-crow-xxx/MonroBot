from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command, or_f

from database.orm_querry import (orm_add_profile, orm_update_description, orm_update_country,
                                 orm_get_profile, orm_update_age, orm_update_gender,
                                 orm_update_city, orm_update_name, orm_update_photo,
                                 orm_rate_profile, orm_count_grades, orm_update_filter_wanted_gender,
                                 orm_get_top)
from keyboards import reply
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from filters.chat_types import ChatTypeFilter
from keyboards.reply import get_keyboard
from keyboards.inline import top_user

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


class AddProfile(StatesGroup):
    id = State()
    name = State()
    gender = State()
    age = State()
    country = State()
    city = State()
    photography = State()
    change_age = State()
    change_name = State()
    change_gender = State()
    change_country = State()
    change_city = State()
    change_photography = State()
    description = State()
    change_description = State()
    grade = State()
    tg_name = State()
    liked_id = State()
    all_grades = State()
    count_grades = State()
    confirmation = State()
    new_count_grades = State()
    wanted_gender = State()
    report = State()
    confirmation_report = State()
    id_ban = State()
    ban = State()


@user_private_router.message(or_f(CommandStart(), F.text.contains('üîô–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')))
async def cmd_start(message: Message, state: FSMContext, session: AsyncSession):
    profile = await orm_get_profile(session, message.from_user.id)
    if profile and profile.ban != 'block':
        await state.clear()
        await message.answer('''–í Monro —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –Ω–∞ —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üì∑ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–ù–µ —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—Ç–∞–≤—è—Ç –≤–∞–º –Ω–∏–∑–∫–∏–µ –æ—Ü–µ–Ω–∫–∏. –í–µ–¥—å —Ö–µ–π—Ç–µ—Ä–æ–≤ –≤—Å–µ–≥–¥–∞ —Ö–≤–∞—Ç–∞–µ—Ç üôÉ
–¢—ã –º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏üîû –±–æ—Ç–∞ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /rules''',
                             reply_markup=reply.start_kb)
    elif profile and profile.ban == 'block':
        await message.answer('–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ªüëø')
    else:
        await message.answer('<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</b> üôÇ', reply_markup=get_keyboard(
            "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            sizes=(1,),
        ))
        await state.set_state(AddProfile.id)


@user_private_router.message(AddProfile.id, F.text)
async def add_profile(message: Message, state: FSMContext):
    await state.update_data(id=message.from_user.id)
    await message.answer('–ò—Ç–∞–∫... <b>–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?</b> üôÇ', reply_markup=get_keyboard(
                                                            f"{message.from_user.first_name}",
                                                            sizes=(1,),
                                                        ))
    await state.set_state(AddProfile.name)


@user_private_router.message(AddProfile.name, F.text)
async def add_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('<b>–ö–∞–∫–æ–≥–æ —Ç—ã –ø–æ–ª–∞?</b> üë´', reply_markup=get_keyboard(
                                                            f"–ú—É–∂—Å–∫–æ–π",
                                                            "–ñ–µ–Ω—Å–∫–∏–π",
                                                            sizes=(1, 1),
                                                        ))
    await state.set_state(AddProfile.gender)


@user_private_router.message(AddProfile.gender, F.text)
async def add_gender(message: Message, state: FSMContext):
    if message.text == '–ú—É–∂—Å–∫–æ–π' or message.text == '–ñ–µ–Ω—Å–∫–∏–π':
        await state.update_data(gender=message.text)
        await message.answer('<b>–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?</b> üë∂...üë®‚Äçü¶≥', reply_markup=reply.del_kb)
        await state.set_state(AddProfile.age)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µüë´')


@user_private_router.message(AddProfile.age, F.text)
async def add_age(message: Message, state: FSMContext):
    try:
        s = int(message.text)
        await state.update_data(age=message.text)
        await message.answer('<b>–ò–∑ –∫–∞–∫–æ–π —Ç—ã —Å—Ç—Ä–∞–Ω—ã?</b> üè≥Ô∏è‚ùì', reply_markup=get_keyboard(
                                                                "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å",
                                                                sizes=(1,),
                                                            ))
        await state.set_state(AddProfile.country)
    except:
        await message.answer('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ü–∏—Ñ—Ä–∞—Öüî¢')


@user_private_router.message(AddProfile.country, F.text)
async def add_country(message: Message, state: FSMContext):
    await state.update_data(country=[message.text, '–ù–µ —É–∫–∞–∑–∞–Ω–∞'][message.text == "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"])
    await message.answer('<b>–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?</b> üåÜ', reply_markup=get_keyboard(
                                                            "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å",
                                                            sizes=(1,),
                                                        ))
    await state.set_state(AddProfile.city)


@user_private_router.message(AddProfile.city, F.text)
async def add_city(message: Message, state: FSMContext):
    await state.update_data(city=[message.text, '–ù–µ —É–∫–∞–∑–∞–Ω'][message.text == "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"])
    await message.answer('''<b>–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b> üì∑.

–ü–æ–º–Ω–∏, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç 18+ –∏ —Ä–µ–∫–ª–∞–º—É''', reply_markup=reply.del_kb)
    await state.set_state(AddProfile.photography)


@user_private_router.message(AddProfile.photography, F.photo)
async def add_city(message: Message, state: FSMContext, session: AsyncSession):
    await state.update_data(photography=message.photo[-1].file_id)
    await message.answer('<b>–û—Ç–ª–∏—á–Ω–æ</b>, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å üôÉ', reply_markup=reply.start_kb)
    data = await state.get_data()
    try:
        await orm_add_profile(session, data)
        await state.clear()
    except Exception as e:
        await message.answer(f'–û—à–∏–±–∫–∞: \n{str(e)}, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏. –û–ø—è—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–≥–µ—Ä –≥–¥–µ-—Ç–æ –Ω–∞–∫–æ—Å—è—á–∏–ª...')


@user_private_router.message(AddProfile.photography)
async def add_image2(message: Message):
    await message.answer('''<b>–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b> üì∑.

–ü–æ–º–Ω–∏, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç 18+ –∏ —Ä–µ–∫–ª–∞–º—É''')


@user_private_router.message(or_f(Command('help'), F.text.lower().contains('–ø–æ–º–æ—â—å')))
async def help_for_user(message: Message, state: FSMContext, session: AsyncSession):
    profile = await orm_get_profile(session, message.from_user.id)
    if profile and profile.ban != 'block':
        await message.answer('''<b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç?</b>ü§ñ

üóí–¢—ã –º–æ–∂–µ—à—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ü§©–ü–æ–ª—É—á–∞—Ç—å –æ—Ü–µ–Ω–∫–∏ –æ—Ç –Ω–∏—Ö
üí¨–ó–∞–≤–µ—Å—Ç–∏ –æ–±—â–µ–Ω–∏–µ, –∞ –º–æ–∂–µ—Ç –¥–∞–∂–µ –∏ —á—Ç–æ-—Ç–æ –±–æ–ª—å—à–µ–µ üòè
üåá–ù–∞–π—Ç–∏ –∫–æ–≥–æ –Ω–∏–±—É–¥—å –∏–∑ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞
üîù–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –≤ —Ç–æ–ø–∞—Ö, –∞ –º–æ–∂–µ—Ç –∏ –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ –Ω–∏—Ö

–ù—É —á—Ç–æ, –ø—Ä–∏—Å—Ç—É–ø–∏–º?üòâ''', reply_markup=reply.start_kb)
    elif profile and profile.ban == 'block':
        await message.answer('–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ªüëø')
    else:
        await message.answer('<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</b> üôÇ', reply_markup=get_keyboard(
            "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            sizes=(1,),
        ))
        await state.set_state(AddProfile.id)


@user_private_router.message(or_f(Command('rules'), F.text.lower().contains('–ø—Ä–∞–≤–∏–ª–∞')))
async def rules(message: Message, state: FSMContext, session: AsyncSession):
    profile = await orm_get_profile(session, message.from_user.id)
    if profile and profile.ban != 'block':
        await message.answer('''‚ùå –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è <b>Monro</b> üëá

üîû –§–æ—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç 18+ ( —ç—Ä–æ—Ç–∏–∫–∞, –Ω–∞—Å–∏–ª–∏–µ, –∫—Ä–æ–≤—å, –ø–µ–¥–æ—Ñ–∏–ª–∏—è –∏ —Ç.–ø )
üó£ –§–æ—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –º–∞—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞, –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è, —Ä–∞–∑–∂–∏–≥–∞–Ω–∏–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ä–æ–∑–Ω–∏, —Ä–∞—Å—Å–∏–∑–º
üí≥ –ù–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç –Ω–∞ —Ñ–æ—Ç–æ ( –≤ —Ü–µ–ª—è—Ö –≤–∞—à–µ–π –∂–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ )
üì¢ –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ª—é–±–∞—è —Ä–µ–∫–ª–∞–º–∞ ( —Å–∞–π—Ç—ã, –∫–∞–Ω–∞–ª—ã, –≥—Ä—É–ø–ø—ã –∏ —Ç.–¥. )
üå∂ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–Ω—Ç–∏–º–∞, —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ —É—Å–ª—É–≥–∞–º –∏–Ω—Ç–∏–º–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞''', reply_markup=reply.start_kb)
    elif profile and profile.ban == 'block':
        await message.answer('–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ªüëø')
    else:
        await message.answer('<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</b> üôÇ', reply_markup=get_keyboard(
            "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            sizes=(1,),
        ))
        await state.set_state(AddProfile.id)


@user_private_router.message(or_f(F.text.contains('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'), F.text.contains('–ù–∞–∑–∞–¥‚¨ÖÔ∏è2Ô∏è‚É£')))
async def my_profile(message: Message, session: AsyncSession, state: FSMContext):
    profile = await orm_get_profile(session, message.from_user.id)
    if profile and profile.ban != 'block':
        await message.answer_photo(
            profile.photography,
            caption=f'''‚≠êÔ∏è–ò–º—è: <strong>{profile.name}, {profile.age}</strong> –ª–µ—Ç\n
üë´–ü–æ–ª: <strong>{profile.gender}</strong>
‚ùì–ö–∞–∫–æ–π –ø–æ–ª –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å: <strong>{' '.join(profile.wanted_gender.split()[:-1])}</strong>
üåÜ–°—Ç—Ä–∞–Ω–∞: <strong>{profile.country}</strong> 
üåá–ì–æ—Ä–æ–¥: <strong>{profile.city}</strong>
{profile.description}
–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: <strong>{
        round(profile.all_grades / profile.count_grades, 2) if profile.count_grades != 0 else str(0)
        }</strong>
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: <strong>{profile.count_grades}</strong>''',
            reply_markup=get_keyboard(
                '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ üì∑',
                '–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç üë∂...üë®‚Äçü¶≥',
                '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª üë´',
                '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É üè≥Ô∏è',
                '–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ üåá',
                '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è ‚≠êÔ∏è',
                '–î–∞–ª–µ–µ1Ô∏è‚É£‚û°Ô∏è',
                'üîô–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                sizes=(3, 3, 2),
            ))
    elif profile and profile.ban == 'block':
        await message.answer('–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ªüëø')
    else:
        await message.answer('<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</b> üôÇ', reply_markup=get_keyboard(
            "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            sizes=(1,),
        ))
        await state.set_state(AddProfile.id)


@user_private_router.message(F.text.contains('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ üì∑'))
async def confirmation(message: Message, state: FSMContext):
    await message.answer('''‚ùóÔ∏è–ü—Ä–∏ –∑–∞–º–µ–Ω–µ —Ñ–æ—Ç–æ –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω—É–ª—è–µ—Ç—Å—è‚ùóÔ∏è\n
<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã?</b>''', reply_markup=get_keyboard(
        '–î–∞‚úÖ',
        '–ù–µ—Ç‚ùå',
        sizes=(2,),
    ))
    await state.set_state(AddProfile.confirmation)


@user_private_router.message(AddProfile.confirmation, F.text)
async def new_photography(message: Message, state: FSMContext, session: AsyncSession):
    if message.text == '–î–∞‚úÖ':
        await message.answer('''<b>–ü—Ä–∏—à–ª–∏ —Å–≤–æ—ë —Ñ–æ—Ç–æ</b> üì∑\n
–ü–æ–º–Ω–∏, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç 18+ –∏ —Ä–µ–∫–ª–∞–º—É''', reply_markup=get_keyboard(
            '–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ',
            sizes=(1,),
        ))
        await state.update_data(id=message.from_user.id)
        await state.set_state(AddProfile.change_photography)
    else:
        await state.clear()
        await my_profile(message, session, state)


@user_private_router.message(AddProfile.change_photography, F.photo)
async def change_photography(message: Message, state: FSMContext, session: AsyncSession):
    await state.update_data(change_photography=message.photo[-1].file_id)
    data = await state.get_data()
    await orm_update_photo(session, data['id'], str(data['change_photography']))
    await orm_rate_profile(session, str(data['id']), 0)
    await orm_count_grades(session, str(data['id']), 0)
    await message.answer('<b>–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ üëå</b>')
    await state.clear()
    await my_profile(message, session, state)


@user_private_router.message(AddProfile.change_photography)
async def add_image2(message: Message, state: FSMContext, session: AsyncSession):
    if message.text == '–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ':
        await state.clear()
        await my_profile(message, session)
    else:
        await message.answer('''<b>–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b> üì∑.\n
–ü–æ–º–Ω–∏, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç 18+ –∏ —Ä–µ–∫–ª–∞–º—É''')


@user_private_router.message(F.text.contains('–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç üë∂...üë®‚Äçü¶≥'))
async def new_age(message: Message, state: FSMContext):
    await message.answer('–£–∫–∞–∂–∏ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç üòâ')
    await state.set_state(AddProfile.change_age)


@user_private_router.message(AddProfile.change_age, F.text)
async def change_age(message: Message, state: FSMContext, session: AsyncSession):
    try:
        s = int(message.text)
        await state.update_data(change_age=message.text)
        data = await state.get_data()
        await orm_update_age(session, message.from_user.id, str(data['change_age']))
        await message.answer('<b>–í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b> üëå')
        await state.clear()
        await my_profile(message, session, state)
    except:
        await message.answer('<b>–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ</b>')


@user_private_router.message(F.text.contains('–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª üë´'))
async def new_gender(message: Message, state: FSMContext):
    await message.answer('–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª üë´', reply_markup=get_keyboard(
                                                            f"–ú—É–∂—Å–∫–æ–π",
                                                            "–ñ–µ–Ω—Å–∫–∏–π",
                                                            sizes=(1, 1),
                                                        ))
    await state.set_state(AddProfile.change_gender)


@user_private_router.message(AddProfile.change_gender, F.text)
async def change_gender(message: Message, state: FSMContext, session: AsyncSession):
    if message.text == '–ú—É–∂—Å–∫–æ–π' or message.text == '–ñ–µ–Ω—Å–∫–∏–π':
        await state.update_data(change_gender=message.text)
        data = await state.get_data()
        await orm_update_gender(session, message.from_user.id, str(data['change_gender']))
        await message.answer('<b>–ü–æ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω</b> üëå')
        await state.clear()
        await my_profile(message, session, state)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µüë´')


@user_private_router.message(F.text.contains('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É üè≥Ô∏è'))
async def new_country(message: Message, state: FSMContext):
    await message.answer('–ò–∑ –∫–∞–∫–æ–π —Ç—ã —Å—Ç—Ä–∞–Ω—ã? üè≥Ô∏è‚ùì', reply_markup=get_keyboard(
                                                                "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å",
                                                                sizes=(1,),
                                                            ))
    await state.set_state(AddProfile.change_country)


@user_private_router.message(AddProfile.change_country, F.text)
async def change_gender(message: Message, state: FSMContext, session: AsyncSession):
    await state.update_data(change_country=[message.text, '–ù–µ —É–∫–∞–∑–∞–Ω–∞'][message.text == "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"])
    data = await state.get_data()
    await orm_update_country(session, message.from_user.id, str(data['change_country']))
    await message.answer('<b>–°—Ç—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞</b> üëå')
    await state.clear()
    await my_profile(message, session, state)


@user_private_router.message(F.text.contains('–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ üåá'))
async def new_city(message: Message, state: FSMContext):
    await message.answer('–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞? üåÜ', reply_markup=get_keyboard(
                                                            "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å",
                                                            sizes=(1,),
                                                        ))
    await state.set_state(AddProfile.change_city)


@user_private_router.message(AddProfile.change_city, F.text)
async def change_city(message: Message, state: FSMContext, session: AsyncSession):
    await state.update_data(change_city=[message.text, '–ù–µ —É–∫–∞–∑–∞–Ω–∞'][message.text == "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"])
    data = await state.get_data()
    await orm_update_city(session, message.from_user.id, str(data['change_city']))
    await message.answer('<b>–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω</b> üëå')
    await state.clear()
    await my_profile(message, session, state)


@user_private_router.message(F.text.contains('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è ‚≠êÔ∏è'))
async def new_name(message: Message, state: FSMContext):
    await message.answer('–£–∫–∞–∂–∏ –Ω–æ–≤–æ–µ –∏–º—è ‚≠êÔ∏è', reply_markup=get_keyboard(
                                                            f"{message.from_user.first_name}",
                                                            sizes=(1,),
                                                        ))
    await state.set_state(AddProfile.change_name)


@user_private_router.message(AddProfile.change_name, F.text)
async def change_name(message: Message, state: FSMContext, session: AsyncSession):
    await state.update_data(change_name=message.text)
    data = await state.get_data()
    await orm_update_name(session, message.from_user.id, str(data['change_name']))
    await message.answer('<b>–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ</b> üëå')
    await state.clear()
    await my_profile(message, session, state)


@user_private_router.message(or_f(F.text.contains('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'), F.text.contains('–î–∞–ª–µ–µ1Ô∏è‚É£‚û°Ô∏è')))
async def my_profile_two(message: Message, session: AsyncSession, state: FSMContext):
    profile = await orm_get_profile(session, message.from_user.id)
    if profile and profile.ban != 'block':
        await message.answer_photo(
            profile.photography,
            caption=f'''‚≠êÔ∏è–ò–º—è: <strong>{profile.name}, {profile.age}</strong> –ª–µ—Ç\n
üë´–ü–æ–ª: <strong>{profile.gender}</strong>
‚ùì–ö–∞–∫–æ–π –ø–æ–ª –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å: <strong>{' '.join(profile.wanted_gender.split()[:-1])}</strong>
üåÜ–°—Ç—Ä–∞–Ω–∞: <strong>{profile.country}</strong> 
üåá–ì–æ—Ä–æ–¥: <strong>{profile.city}</strong>
{profile.description}
–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: <strong>{
        round(profile.all_grades / profile.count_grades, 2) if profile.count_grades != 0 else 0
        }</strong>
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: <strong>{profile.count_grades}</strong>''',
            reply_markup=get_keyboard(
                '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ ‚úèÔ∏è',
                '–§–∏–ª—å—Ç—Ä—ã üìù',
                '–ù–∞–∑–∞–¥‚¨ÖÔ∏è2Ô∏è‚É£',
                'üîô–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                sizes=(2, 2),
            ))
    elif profile and profile.ban == 'block':
        await message.answer('–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ªüëø')
    else:
        await message.answer('<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</b> üôÇ', reply_markup=get_keyboard(
            "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            sizes=(1,),
        ))
        await state.set_state(AddProfile.id)


@user_private_router.message(F.text.contains('–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ ‚úèÔ∏è'))
async def new_description(message: Message, state: FSMContext):
    await message.answer('‚úèÔ∏è –ù–∞–ø–∏—à–∏ —á—Ç–æ –Ω–∏–±—É–¥—å –æ —Å–µ–±–µ, –Ω–æ –ø–æ–º–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –¥–ª–∏–Ω—É –≤ <b>255</b>',
                         reply_markup=get_keyboard(
                             '–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º',
                             sizes=(1,),
                         ))
    await state.set_state(AddProfile.change_description)


@user_private_router.message(AddProfile.change_description, F.text)
async def change_description(message: Message, state: FSMContext, session: AsyncSession):
    if len(message.text) <= 255:
        await state.update_data(change_description=[f'\n‚úèÔ∏è: {message.text}\n', ''][message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º'])
        data = await state.get_data()
        await orm_update_description(session, message.from_user.id, str(data['change_description']))
        await message.answer('<b>–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ</b> üëå')
        await state.clear()
        await my_profile_two(message, session, state)
    else:
        await message.answer('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –¥–ª–∏–Ω—É –≤ <b>255</b> —Å–∏–º–≤–æ–ª–æ–≤')


@user_private_router.message(F.text.contains('–§–∏–ª—å—Ç—Ä—ã üìù'))
async def wanted_gender(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏ –ø–æ–ª, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å',
                         reply_markup=get_keyboard(
                             '–ú—É–∂—Å–∫–æ–π üë®‚Äçü¶±',
                             '–ñ–µ–Ω—Å–∫–∏–π üë©‚Äçü¶≥',
                             '–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã üë´',
                             sizes=(2, 1),
                         ))
    await state.set_state(AddProfile.wanted_gender)


@user_private_router.message(AddProfile.wanted_gender, F.text)
async def change_wanted_gender(message: Message, state: FSMContext, session: AsyncSession):
    if message.text == '–ú—É–∂—Å–∫–æ–π üë®‚Äçü¶±' or message.text == '–ñ–µ–Ω—Å–∫–∏–π üë©‚Äçü¶≥' or message.text == '–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã üë´':
        await state.update_data(wanted_gender=message.text)
        data = await state.get_data()
        await orm_update_filter_wanted_gender(session, message.from_user.id, str(data['wanted_gender']))
        await message.answer('<b>–§–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã</b> üëå')
        await state.clear()
        await my_profile_two(message, session, state)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏ —Ñ–∏–ª—å—Ç—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µüë´')


@user_private_router.message(F.text.contains('–¢–û–ü'))
async def top(message: Message, session: AsyncSession, state: FSMContext):
    profile = await orm_get_profile(session, message.from_user.id)
    if profile and profile.ban != 'block':
        tops = await orm_get_top(session)
        profile = tops[0]
        await message.answer_photo(
            profile.photography,
            caption=f'''‚≠êÔ∏è–ò–º—è: <strong>{profile.name}, {profile.age}</strong> –ª–µ—Ç\n
üåÜ–°—Ç—Ä–∞–Ω–∞: <strong>{profile.country}</strong> 
üåá–ì–æ—Ä–æ–¥: <strong>{profile.city}</strong>
{profile.description}
–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: <strong>{
    round(profile.all_grades / profile.count_grades, 2) if profile.count_grades != 0 else 0
    }</strong>
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: <strong>{profile.count_grades}</strong>''',
            reply_markup=top_user)
    elif profile and profile.ban == 'block':
        await message.answer('–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ªüëø')
    else:
        await message.answer('<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</b> üôÇ', reply_markup=get_keyboard(
            "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
            sizes=(1,),
        ))
        await state.set_state(AddProfile.id)


@user_private_router.callback_query(or_f(F.data == 'top_1', F.data == 'top_2', F.data == 'top_3'))
async def top1(callback: CallbackQuery, session: AsyncSession):
    data = callback.data
    tops = await orm_get_top(session)
    if data == 'top_1':
        await callback.message.delete()
        await callback.answer()
        profile = tops[0]
        await callback.message.answer_photo(
            profile.photography,
            caption=f'''‚≠êÔ∏è–ò–º—è: <strong>{profile.name}, {profile.age}</strong> –ª–µ—Ç\n
üåÜ–°—Ç—Ä–∞–Ω–∞: <strong>{profile.country}</strong> 
üåá–ì–æ—Ä–æ–¥: <strong>{profile.city}</strong>
{profile.description}
–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: <strong>{
    round(profile.all_grades / profile.count_grades, 2) if profile.count_grades != 0 else 0
    }</strong>
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: <strong>{profile.count_grades}</strong>''',
            reply_markup=top_user)
    elif data == 'top_2':
        await callback.message.delete()
        await callback.answer()
        profile = tops[1]
        await callback.message.answer_photo(
            profile.photography,
            caption=f'''‚≠êÔ∏è–ò–º—è: <strong>{profile.name}, {profile.age}</strong> –ª–µ—Ç\n
üåÜ–°—Ç—Ä–∞–Ω–∞: <strong>{profile.country}</strong> 
üåá–ì–æ—Ä–æ–¥: <strong>{profile.city}</strong>
{profile.description}
–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: <strong>{
    round(profile.all_grades / profile.count_grades, 2) if profile.count_grades != 0 else 0
    }</strong>
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: <strong>{profile.count_grades}</strong>''',
            reply_markup=top_user)
    elif data == 'top_3':
        await callback.message.delete()
        await callback.answer()
        profile = tops[2]
        await callback.message.answer_photo(
            profile.photography,
            caption=f'''‚≠êÔ∏è–ò–º—è: <strong>{profile.name}, {profile.age}</strong> –ª–µ—Ç\n
üåÜ–°—Ç—Ä–∞–Ω–∞: <strong>{profile.country}</strong> 
üåá–ì–æ—Ä–æ–¥: <strong>{profile.city}</strong>
{profile.description}
–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: <strong>{
    round(profile.all_grades / profile.count_grades, 2) if profile.count_grades != 0 else 0
    }</strong>
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: <strong>{profile.count_grades}</strong>''',
            reply_markup=top_user)
